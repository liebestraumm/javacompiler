// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-L2TE5OE
// DateTime: 15/06/2018 10:31:19 PM
// UserName: rew90
// Input file <parser.y - 15/06/2018 10:31:16 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GPLexTutorial
{
public enum Tokens {error=128,EOF=129,INTEGER_LITERAL=130,FLOAT_LITERAL=131,IDENT=132,
    CHARACTER=133,STRING_LITERAL=134,ABSTRACT=135,ASSERT=136,BOOLEAN=137,BREAK=138,
    BYTE=139,CASE=140,CATCH=141,CHAR=142,CLASS=143,CONST=144,
    CONTINUE=145,DEFAULT=146,DO=147,DOUBLE=148,ELSE=149,ENUM=150,
    EXTENDS=151,FINAL=152,FINALLY=153,FLOAT=154,FOR=155,IF=156,
    GOTO=157,IMPLEMENTS=158,IMPORT=159,INSTANCEOF=160,INT=161,INTERFACE=162,
    LONG=163,NATIVE=164,NEW=165,PACKAGE=166,PRIVATE=167,PROTECTED=168,
    PUBLIC=169,RETURN=170,SHORT=171,STATIC=172,STRICTFP=173,SUPER=174,
    SWITCH=175,SYNCHRONIZED=176,THIS=177,THROW=178,THROWS=179,TRANSIENT=180,
    TRY=181,VOID=182,VOLATILE=183,WHILE=184,TRUE=185,FALSE=186,
    NULL=187,SEPARATOR_ONE=188,SEPARATOR_TWO=189,LAMBDA=190,EQUALS=191,GEQ=192,
    LEQ=193,NOT_EQUALS=194,LOGICAL_AND=195,OR=196,INCREMENT=197,DECREMENT=198,
    LEFT_SHIFT=199,RIGHT_SHIFT=200,ZERO_FILL_RIGHT_SHIFT=201,ADD_RIGHT_OP=202,SUB_RIGHT_OP=203,MULTI_RIGHT_OP=204,
    DIV_RIGHT_OP=205,AND_ASSIGNMENT=206,OR_ASSIGNMENT=207,EXCLUSIVE_ASSIGNMENT=208,MODULUS_ASSIGNMENT=209,LSHIFT_ASSIGNMENT=210,
    RSHIFT_ASSIGNMENT=211,ZRSHIFT_ASSIGNMENT=212,ZERO_FILL_SHIFT=213};

public struct ValueType
#line 8 "parser.y"
{
	public AST.CompilationUnit compilationUnit;
	public AST.PackageDeclaration packageDeclaration;
	public List<AST.ImportDeclaration> importDeclarations;
	public List<AST.TypeDeclaration> typeDeclarations;
	public AST.ClassDeclaration classDeclaration;
	public List<AST.Declaration> declarations;
	public AST.Declaration declaration;
	public AST.MethodHeader methodHeader;
	public AST.MethodDeclarator methodDeclarator;
	
	public List<AST.Parameter> parameters;
	public AST.Parameter parameter;	
	public List<AST.Modifier> modifiers;
	public AST.Modifier modifier;
	public AST.Type ASTtype;
	public AST.NamedType namedType;
	public AST.CompoundStatement compoundStatement;
	public List<AST.Statement> statements;
	public AST.Statement statement;
	public AST.Expression expression;

    public int num;
    public string name;
	public List<Tuple<string, AST.ExpressionStatement>> variableDeclarators;
	public Tuple<string, AST.ExpressionStatement> variableDeclarator;
	public float floatVal;
	public char character;
	public string stringLiteral;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 15/06/2018 10:31:16 PM
#line 4 "parser.y"
public static AST.CompilationUnit root;
#line default
  // End verbatim content from parser.y - 15/06/2018 10:31:16 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[131];
  private static State[] states = new State[187];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "OrdinaryCompilationUnit", "TypeDeclarations", "TypeDeclaration", 
      "ClassDeclaration", "NormalClassDeclaration", "PackageDeclarationOpt", 
      "ImportDeclarations", "MethodDeclaration", "ClassMemberDeclaration", "ClassBodyDeclaration", 
      "ClassBody", "ClassBodyDeclarations", "MethodHeader", "Result", "UnannType", 
      "UnannPrimitiveType", "UnannReferenceType", "NumericType", "IntegralType", 
      "UnannArrayType", "UnannTypeVariable", "MethodDeclarator", "FormalParameters", 
      "FormalParameterWithCommas", "FormalParameter", "FormalParameterWithComma", 
      "Modifiers", "Modifier", "VariableDeclaratorList", "VariableDeclaratorWithCommas", 
      "VariableDeclarator", "VariableDeclaratorWithComma", "VariableDeclaratorId", 
      "MethodBody", "Block", "BlockStatements", "BlockStatement", "Statement", 
      "StatementWithoutTrailingSubstatement", "LocalVariableDeclarationStatement", 
      "LocalVariableDeclaration", "ExpressionStatement", "IfThenStatement", "IfThenElseStatement", 
      "StatementNoShortIf", "IfThenElseStatementNoShortIf", "WhileStatement", 
      "ReturnStatement", "StatementExpression", "Assignment", "LeftHandSide", 
      "Expression", "AssignmentExpression", "Literal", "ExpressionName", "ConditionalExpression", 
      "ConditionalOrExpression", "ConditionalAndExpression", "InclusiveOrExpression", 
      "ExclusiveOrExpression", "AndExpression", "EqualityExpression", "RelationalExpression", 
      "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", "UnaryExpression", 
      "UnaryExpressionNotPlusMinus", "PostfixExpression", "Primary", "PrimaryNoNewArray", 
      "VariableInitializer", "AssignmentOperator", "PlusOperator", "SubtractOperator", 
      "MultiplicationOperator", "DivisionOperator", "ModulusOperator", "Program", 
      "$accept", "TypeParametersOpt", "SuperclassOpt", "SuperinterfacesOpt", 
      "Anon@1", "ThrowsOpt", "Dims", "Dim", "DimsOpt", };

  static Parser() {
    states[0] = new State(-5,new int[]{-80,1,-1,3,-2,4,-7,5});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(-6,new int[]{-8,6});
    states[6] = new State(new int[]{143,-13,169,-13,168,-13,167,-13,135,-13,172,-13,152,-13,129,-8},new int[]{-3,7,-4,8,-5,10,-6,11,-28,12});
    states[7] = new State(-4);
    states[8] = new State(new int[]{143,-13,169,-13,168,-13,167,-13,135,-13,172,-13,152,-13,129,-8},new int[]{-3,9,-4,8,-5,10,-6,11,-28,12});
    states[9] = new State(-7);
    states[10] = new State(-9);
    states[11] = new State(-10);
    states[12] = new State(new int[]{143,13,169,162,168,163,167,164,135,165,172,166,152,167},new int[]{-29,160});
    states[13] = new State(new int[]{132,14});
    states[14] = new State(-21,new int[]{-82,15});
    states[15] = new State(-22,new int[]{-83,16});
    states[16] = new State(-23,new int[]{-84,17});
    states[17] = new State(new int[]{123,19},new int[]{-12,18});
    states[18] = new State(-11);
    states[19] = new State(-26,new int[]{-13,20});
    states[20] = new State(new int[]{125,21,161,-13,132,-13,182,-13,169,-13,168,-13,167,-13,135,-13,172,-13,152,-13},new int[]{-11,22,-10,23,-9,24,-28,25});
    states[21] = new State(-24);
    states[22] = new State(-25);
    states[23] = new State(-27);
    states[24] = new State(-28);
    states[25] = new State(new int[]{161,148,132,161,182,186,169,162,168,163,167,164,135,165,172,166,152,167},new int[]{-14,26,-29,160,-15,169,-16,185,-17,145,-19,146,-20,147,-18,149,-21,150,-22,151});
    states[26] = new State(new int[]{123,29},new int[]{-35,27,-36,28});
    states[27] = new State(-29);
    states[28] = new State(-54);
    states[29] = new State(-57,new int[]{-37,30});
    states[30] = new State(new int[]{125,31,132,97,123,29,170,100,156,105,184,115,161,148,169,-13,168,-13,167,-13,135,-13,172,-13,152,-13},new int[]{-38,32,-39,33,-40,34,-43,35,-50,36,-51,38,-52,39,-56,96,-36,98,-49,99,-44,104,-45,113,-48,114,-41,129,-42,130,-16,132,-17,145,-19,146,-20,147,-18,149,-21,150,-22,151,-28,157});
    states[31] = new State(-55);
    states[32] = new State(-56);
    states[33] = new State(-58);
    states[34] = new State(-71);
    states[35] = new State(-81);
    states[36] = new State(new int[]{59,37});
    states[37] = new State(-86);
    states[38] = new State(-87);
    states[39] = new State(new int[]{61,95},new int[]{-74,40});
    states[40] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-53,41,-54,42,-57,43,-58,44,-59,45,-60,46,-61,47,-62,48,-63,49,-64,92,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,93,-51,94,-52,39});
    states[41] = new State(-88);
    states[42] = new State(-97);
    states[43] = new State(-98);
    states[44] = new State(-100);
    states[45] = new State(-101);
    states[46] = new State(-102);
    states[47] = new State(-103);
    states[48] = new State(-104);
    states[49] = new State(new int[]{191,50,194,90,59,-105,41,-105,44,-105});
    states[50] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-64,51,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[51] = new State(new int[]{60,52,62,83,193,85,192,87,191,-107,194,-107,59,-107,41,-107,44,-107});
    states[52] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-65,53,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[53] = new State(-110);
    states[54] = new State(new int[]{43,61,45,81,60,-114,62,-114,193,-114,192,-114,191,-114,194,-114,59,-114,41,-114,44,-114},new int[]{-75,55,-76,79});
    states[55] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-67,56,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[56] = new State(new int[]{42,75,47,76,37,77,43,-116,45,-116,60,-116,62,-116,193,-116,192,-116,191,-116,194,-116,59,-116,41,-116,44,-116},new int[]{-77,57,-78,71,-79,73});
    states[57] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-68,58,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[58] = new State(-119);
    states[59] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-68,60,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[60] = new State(-122);
    states[61] = new State(-92);
    states[62] = new State(-123);
    states[63] = new State(-124);
    states[64] = new State(-125);
    states[65] = new State(-127);
    states[66] = new State(-128);
    states[67] = new State(-129);
    states[68] = new State(-130);
    states[69] = new State(-126);
    states[70] = new State(-90);
    states[71] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-68,72,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[72] = new State(-120);
    states[73] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-68,74,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[74] = new State(-121);
    states[75] = new State(-94);
    states[76] = new State(-95);
    states[77] = new State(-96);
    states[78] = new State(-118);
    states[79] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-67,80,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[80] = new State(new int[]{42,75,47,76,37,77,43,-117,45,-117,60,-117,62,-117,193,-117,192,-117,191,-117,194,-117,59,-117,41,-117,44,-117},new int[]{-77,57,-78,71,-79,73});
    states[81] = new State(-93);
    states[82] = new State(new int[]{42,75,47,76,37,77,43,-115,45,-115,60,-115,62,-115,193,-115,192,-115,191,-115,194,-115,59,-115,41,-115,44,-115},new int[]{-77,57,-78,71,-79,73});
    states[83] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-65,84,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[84] = new State(-111);
    states[85] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-65,86,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[86] = new State(-112);
    states[87] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-65,88,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[88] = new State(-113);
    states[89] = new State(-109);
    states[90] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-64,91,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,69});
    states[91] = new State(new int[]{60,52,62,83,193,85,192,87,191,-108,194,-108,59,-108,41,-108,44,-108});
    states[92] = new State(new int[]{60,52,62,83,193,85,192,87,191,-106,194,-106,59,-106,41,-106,44,-106});
    states[93] = new State(new int[]{42,-126,47,-126,37,-126,43,-126,45,-126,60,-126,62,-126,193,-126,192,-126,191,-126,194,-126,59,-126,41,-126,44,-126,61,-89});
    states[94] = new State(-99);
    states[95] = new State(-91);
    states[96] = new State(-89);
    states[97] = new State(new int[]{61,-90,91,-41,132,-41});
    states[98] = new State(-82);
    states[99] = new State(-83);
    states[100] = new State(new int[]{59,103,43,61,130,67,134,68,132,70},new int[]{-53,101,-54,42,-57,43,-58,44,-59,45,-60,46,-61,47,-62,48,-63,49,-64,92,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,93,-51,94,-52,39});
    states[101] = new State(new int[]{59,102});
    states[102] = new State(-84);
    states[103] = new State(-85);
    states[104] = new State(-72);
    states[105] = new State(new int[]{40,106});
    states[106] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-53,107,-54,42,-57,43,-58,44,-59,45,-60,46,-61,47,-62,48,-63,49,-64,92,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,93,-51,94,-52,39});
    states[107] = new State(new int[]{41,108});
    states[108] = new State(new int[]{132,70,123,29,170,100,156,121,184,115},new int[]{-39,109,-46,110,-40,120,-43,35,-50,36,-51,38,-52,39,-56,96,-36,98,-49,99,-44,104,-45,113,-48,114,-47,128});
    states[109] = new State(-76);
    states[110] = new State(new int[]{149,111});
    states[111] = new State(new int[]{132,70,123,29,170,100,156,105,184,115},new int[]{-39,112,-40,34,-43,35,-50,36,-51,38,-52,39,-56,96,-36,98,-49,99,-44,104,-45,113,-48,114});
    states[112] = new State(-77);
    states[113] = new State(-73);
    states[114] = new State(-74);
    states[115] = new State(new int[]{40,116});
    states[116] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-53,117,-54,42,-57,43,-58,44,-59,45,-60,46,-61,47,-62,48,-63,49,-64,92,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,93,-51,94,-52,39});
    states[117] = new State(new int[]{41,118});
    states[118] = new State(new int[]{132,70,123,29,170,100,156,105,184,115},new int[]{-39,119,-40,34,-43,35,-50,36,-51,38,-52,39,-56,96,-36,98,-49,99,-44,104,-45,113,-48,114});
    states[119] = new State(-75);
    states[120] = new State(new int[]{125,-71,132,-71,123,-71,170,-71,156,-71,184,-71,161,-71,169,-71,168,-71,167,-71,135,-71,172,-71,152,-71,149,-79});
    states[121] = new State(new int[]{40,122});
    states[122] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-53,123,-54,42,-57,43,-58,44,-59,45,-60,46,-61,47,-62,48,-63,49,-64,92,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,93,-51,94,-52,39});
    states[123] = new State(new int[]{41,124});
    states[124] = new State(new int[]{132,70,123,29,170,100,156,121,184,115},new int[]{-39,109,-46,125,-40,120,-43,35,-50,36,-51,38,-52,39,-56,96,-36,98,-49,99,-44,104,-45,113,-48,114,-47,128});
    states[125] = new State(new int[]{149,126});
    states[126] = new State(new int[]{132,70,123,29,170,100,156,121,184,115},new int[]{-39,112,-46,127,-40,120,-43,35,-50,36,-51,38,-52,39,-56,96,-36,98,-49,99,-44,104,-45,113,-48,114,-47,128});
    states[127] = new State(-80);
    states[128] = new State(-78);
    states[129] = new State(-59);
    states[130] = new State(new int[]{59,131});
    states[131] = new State(-60);
    states[132] = new State(new int[]{132,143},new int[]{-30,133,-32,134,-34,139});
    states[133] = new State(-61);
    states[134] = new State(-65,new int[]{-31,135});
    states[135] = new State(new int[]{44,137,59,-63},new int[]{-33,136});
    states[136] = new State(-64);
    states[137] = new State(new int[]{132,143},new int[]{-32,138,-34,139});
    states[138] = new State(-66);
    states[139] = new State(new int[]{61,140,44,-67,59,-67});
    states[140] = new State(new int[]{43,61,130,67,134,68,132,70},new int[]{-73,141,-53,142,-54,42,-57,43,-58,44,-59,45,-60,46,-61,47,-62,48,-63,49,-64,92,-65,89,-66,54,-67,82,-68,78,-75,59,-69,62,-70,63,-71,64,-72,65,-55,66,-56,93,-51,94,-52,39});
    states[141] = new State(-68);
    states[142] = new State(-70);
    states[143] = new State(-69,new int[]{-89,144});
    states[144] = new State(-52);
    states[145] = new State(-33);
    states[146] = new State(-35);
    states[147] = new State(-36);
    states[148] = new State(-37);
    states[149] = new State(-34);
    states[150] = new State(-38);
    states[151] = new State(new int[]{91,155,132,-39},new int[]{-87,152,-88,153});
    states[152] = new State(-40);
    states[153] = new State(new int[]{91,155,132,-43},new int[]{-87,154,-88,153});
    states[154] = new State(-42);
    states[155] = new State(new int[]{93,156});
    states[156] = new State(-44);
    states[157] = new State(new int[]{161,148,132,161,169,162,168,163,167,164,135,165,172,166,152,167},new int[]{-16,158,-29,160,-17,145,-19,146,-20,147,-18,149,-21,150,-22,151});
    states[158] = new State(new int[]{132,143},new int[]{-30,159,-32,134,-34,139});
    states[159] = new State(-62);
    states[160] = new State(-12);
    states[161] = new State(-41);
    states[162] = new State(-14);
    states[163] = new State(-15);
    states[164] = new State(-16);
    states[165] = new State(-17);
    states[166] = new State(-18);
    states[167] = new State(-19,new int[]{-85,168});
    states[168] = new State(-20);
    states[169] = new State(new int[]{132,172},new int[]{-23,170});
    states[170] = new State(-53,new int[]{-86,171});
    states[171] = new State(-30);
    states[172] = new State(new int[]{40,173});
    states[173] = new State(new int[]{161,-13,132,-13,169,-13,168,-13,167,-13,135,-13,172,-13,152,-13,41,-47},new int[]{-24,174,-26,177,-28,182});
    states[174] = new State(new int[]{41,175});
    states[175] = new State(-69,new int[]{-89,176});
    states[176] = new State(-45);
    states[177] = new State(-49,new int[]{-25,178});
    states[178] = new State(new int[]{44,180,41,-46},new int[]{-27,179});
    states[179] = new State(-48);
    states[180] = new State(-13,new int[]{-26,181,-28,182});
    states[181] = new State(-50);
    states[182] = new State(new int[]{161,148,132,161,169,162,168,163,167,164,135,165,172,166,152,167},new int[]{-16,183,-29,160,-17,145,-19,146,-20,147,-18,149,-21,150,-22,151});
    states[183] = new State(new int[]{132,143},new int[]{-34,184});
    states[184] = new State(-51);
    states[185] = new State(-31);
    states[186] = new State(-32);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-81, new int[]{-80,129});
    rules[2] = new Rule(-80, new int[]{-1});
    rules[3] = new Rule(-1, new int[]{-2});
    rules[4] = new Rule(-2, new int[]{-7,-8,-3});
    rules[5] = new Rule(-7, new int[]{});
    rules[6] = new Rule(-8, new int[]{});
    rules[7] = new Rule(-3, new int[]{-4,-3});
    rules[8] = new Rule(-3, new int[]{});
    rules[9] = new Rule(-4, new int[]{-5});
    rules[10] = new Rule(-5, new int[]{-6});
    rules[11] = new Rule(-6, new int[]{-28,143,132,-82,-83,-84,-12});
    rules[12] = new Rule(-28, new int[]{-28,-29});
    rules[13] = new Rule(-28, new int[]{});
    rules[14] = new Rule(-29, new int[]{169});
    rules[15] = new Rule(-29, new int[]{168});
    rules[16] = new Rule(-29, new int[]{167});
    rules[17] = new Rule(-29, new int[]{135});
    rules[18] = new Rule(-29, new int[]{172});
    rules[19] = new Rule(-85, new int[]{});
    rules[20] = new Rule(-29, new int[]{152,-85});
    rules[21] = new Rule(-82, new int[]{});
    rules[22] = new Rule(-83, new int[]{});
    rules[23] = new Rule(-84, new int[]{});
    rules[24] = new Rule(-12, new int[]{123,-13,125});
    rules[25] = new Rule(-13, new int[]{-13,-11});
    rules[26] = new Rule(-13, new int[]{});
    rules[27] = new Rule(-11, new int[]{-10});
    rules[28] = new Rule(-10, new int[]{-9});
    rules[29] = new Rule(-9, new int[]{-28,-14,-35});
    rules[30] = new Rule(-14, new int[]{-15,-23,-86});
    rules[31] = new Rule(-15, new int[]{-16});
    rules[32] = new Rule(-15, new int[]{182});
    rules[33] = new Rule(-16, new int[]{-17});
    rules[34] = new Rule(-16, new int[]{-18});
    rules[35] = new Rule(-17, new int[]{-19});
    rules[36] = new Rule(-19, new int[]{-20});
    rules[37] = new Rule(-20, new int[]{161});
    rules[38] = new Rule(-18, new int[]{-21});
    rules[39] = new Rule(-18, new int[]{-22});
    rules[40] = new Rule(-21, new int[]{-22,-87});
    rules[41] = new Rule(-22, new int[]{132});
    rules[42] = new Rule(-87, new int[]{-88,-87});
    rules[43] = new Rule(-87, new int[]{-88});
    rules[44] = new Rule(-88, new int[]{91,93});
    rules[45] = new Rule(-23, new int[]{132,40,-24,41,-89});
    rules[46] = new Rule(-24, new int[]{-26,-25});
    rules[47] = new Rule(-24, new int[]{});
    rules[48] = new Rule(-25, new int[]{-25,-27});
    rules[49] = new Rule(-25, new int[]{});
    rules[50] = new Rule(-27, new int[]{44,-26});
    rules[51] = new Rule(-26, new int[]{-28,-16,-34});
    rules[52] = new Rule(-34, new int[]{132,-89});
    rules[53] = new Rule(-86, new int[]{});
    rules[54] = new Rule(-35, new int[]{-36});
    rules[55] = new Rule(-36, new int[]{123,-37,125});
    rules[56] = new Rule(-37, new int[]{-37,-38});
    rules[57] = new Rule(-37, new int[]{});
    rules[58] = new Rule(-38, new int[]{-39});
    rules[59] = new Rule(-38, new int[]{-41});
    rules[60] = new Rule(-41, new int[]{-42,59});
    rules[61] = new Rule(-42, new int[]{-16,-30});
    rules[62] = new Rule(-42, new int[]{-28,-16,-30});
    rules[63] = new Rule(-30, new int[]{-32,-31});
    rules[64] = new Rule(-31, new int[]{-31,-33});
    rules[65] = new Rule(-31, new int[]{});
    rules[66] = new Rule(-33, new int[]{44,-32});
    rules[67] = new Rule(-32, new int[]{-34});
    rules[68] = new Rule(-32, new int[]{-34,61,-73});
    rules[69] = new Rule(-89, new int[]{});
    rules[70] = new Rule(-73, new int[]{-53});
    rules[71] = new Rule(-39, new int[]{-40});
    rules[72] = new Rule(-39, new int[]{-44});
    rules[73] = new Rule(-39, new int[]{-45});
    rules[74] = new Rule(-39, new int[]{-48});
    rules[75] = new Rule(-48, new int[]{184,40,-53,41,-39});
    rules[76] = new Rule(-44, new int[]{156,40,-53,41,-39});
    rules[77] = new Rule(-45, new int[]{156,40,-53,41,-46,149,-39});
    rules[78] = new Rule(-46, new int[]{-47});
    rules[79] = new Rule(-46, new int[]{-40});
    rules[80] = new Rule(-47, new int[]{156,40,-53,41,-46,149,-46});
    rules[81] = new Rule(-40, new int[]{-43});
    rules[82] = new Rule(-40, new int[]{-36});
    rules[83] = new Rule(-40, new int[]{-49});
    rules[84] = new Rule(-49, new int[]{170,-53,59});
    rules[85] = new Rule(-49, new int[]{170,59});
    rules[86] = new Rule(-43, new int[]{-50,59});
    rules[87] = new Rule(-50, new int[]{-51});
    rules[88] = new Rule(-51, new int[]{-52,-74,-53});
    rules[89] = new Rule(-52, new int[]{-56});
    rules[90] = new Rule(-56, new int[]{132});
    rules[91] = new Rule(-74, new int[]{61});
    rules[92] = new Rule(-75, new int[]{43});
    rules[93] = new Rule(-76, new int[]{45});
    rules[94] = new Rule(-77, new int[]{42});
    rules[95] = new Rule(-78, new int[]{47});
    rules[96] = new Rule(-79, new int[]{37});
    rules[97] = new Rule(-53, new int[]{-54});
    rules[98] = new Rule(-54, new int[]{-57});
    rules[99] = new Rule(-54, new int[]{-51});
    rules[100] = new Rule(-57, new int[]{-58});
    rules[101] = new Rule(-58, new int[]{-59});
    rules[102] = new Rule(-59, new int[]{-60});
    rules[103] = new Rule(-60, new int[]{-61});
    rules[104] = new Rule(-61, new int[]{-62});
    rules[105] = new Rule(-62, new int[]{-63});
    rules[106] = new Rule(-63, new int[]{-64});
    rules[107] = new Rule(-63, new int[]{-63,191,-64});
    rules[108] = new Rule(-63, new int[]{-63,194,-64});
    rules[109] = new Rule(-64, new int[]{-65});
    rules[110] = new Rule(-64, new int[]{-64,60,-65});
    rules[111] = new Rule(-64, new int[]{-64,62,-65});
    rules[112] = new Rule(-64, new int[]{-64,193,-65});
    rules[113] = new Rule(-64, new int[]{-64,192,-65});
    rules[114] = new Rule(-65, new int[]{-66});
    rules[115] = new Rule(-66, new int[]{-67});
    rules[116] = new Rule(-66, new int[]{-66,-75,-67});
    rules[117] = new Rule(-66, new int[]{-66,-76,-67});
    rules[118] = new Rule(-67, new int[]{-68});
    rules[119] = new Rule(-67, new int[]{-67,-77,-68});
    rules[120] = new Rule(-67, new int[]{-67,-78,-68});
    rules[121] = new Rule(-67, new int[]{-67,-79,-68});
    rules[122] = new Rule(-68, new int[]{-75,-68});
    rules[123] = new Rule(-68, new int[]{-69});
    rules[124] = new Rule(-69, new int[]{-70});
    rules[125] = new Rule(-70, new int[]{-71});
    rules[126] = new Rule(-70, new int[]{-56});
    rules[127] = new Rule(-71, new int[]{-72});
    rules[128] = new Rule(-72, new int[]{-55});
    rules[129] = new Rule(-55, new int[]{130});
    rules[130] = new Rule(-55, new int[]{134});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> CompilationUnit
#line 139 "parser.y"
                                                                                        { root = ValueStack[ValueStack.Depth-1].compilationUnit; }
#line default
        break;
      case 3: // CompilationUnit -> OrdinaryCompilationUnit
#line 142 "parser.y"
                                                                                        { CurrentSemanticValue.compilationUnit = ValueStack[ValueStack.Depth-1].compilationUnit; }
#line default
        break;
      case 4: // OrdinaryCompilationUnit -> PackageDeclarationOpt, ImportDeclarations, 
              //                            TypeDeclarations
#line 145 "parser.y"
                                                                                        { CurrentSemanticValue.compilationUnit = new AST.CompilationUnit(ValueStack[ValueStack.Depth-3].packageDeclaration, ValueStack[ValueStack.Depth-2].importDeclarations, ValueStack[ValueStack.Depth-1].typeDeclarations); }
#line default
        break;
      case 5: // PackageDeclarationOpt -> /* empty */
#line 148 "parser.y"
                                                                                        { CurrentSemanticValue.packageDeclaration = new AST.PackageDeclaration(); }
#line default
        break;
      case 6: // ImportDeclarations -> /* empty */
#line 151 "parser.y"
                                                                                        { CurrentSemanticValue.importDeclarations = new List<AST.ImportDeclaration>(); }
#line default
        break;
      case 7: // TypeDeclarations -> TypeDeclaration, TypeDeclarations
#line 154 "parser.y"
                                                                                        { CurrentSemanticValue.typeDeclarations = ValueStack[ValueStack.Depth-1].typeDeclarations; CurrentSemanticValue.typeDeclarations.Add(ValueStack[ValueStack.Depth-1].typeDeclarations); }
#line default
        break;
      case 8: // TypeDeclarations -> /* empty */
#line 155 "parser.y"
                                                                            { CurrentSemanticValue.typeDeclarations = new List<AST.TypeDeclaration>(); }
#line default
        break;
      case 9: // TypeDeclaration -> ClassDeclaration
#line 158 "parser.y"
                                                                                        { CurrentSemanticValue.classDeclaration = ValueStack[ValueStack.Depth-1].classDeclaration; }
#line default
        break;
      case 10: // ClassDeclaration -> NormalClassDeclaration
#line 161 "parser.y"
                                                                                        { CurrentSemanticValue.classDeclaration = ValueStack[ValueStack.Depth-1].classDeclaration; }
#line default
        break;
      case 11: // NormalClassDeclaration -> Modifiers, CLASS, IDENT, TypeParametersOpt, 
               //                           SuperclassOpt, SuperinterfacesOpt, ClassBody
#line 164 "parser.y"
                                                                                                             { CurrentSemanticValue.classDeclaration = new AST.ClassDeclaration(ValueStack[ValueStack.Depth-7].modifiers, ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-1].declarations); }
#line default
        break;
      case 12: // Modifiers -> Modifiers, Modifier
#line 167 "parser.y"
                                               { CurrentSemanticValue.modifiers = ValueStack[ValueStack.Depth-2].modifiers; CurrentSemanticValue.modifiers.Add(ValueStack[ValueStack.Depth-1].modifier); }
#line default
        break;
      case 13: // Modifiers -> /* empty */
#line 168 "parser.y"
                                       { CurrentSemanticValue.modifiers = new List<AST.Modifier>(); }
#line default
        break;
      case 14: // Modifier -> PUBLIC
#line 171 "parser.y"
                                                                                        { CurrentSemanticValue.modifier = AST.Modifier.PUBLIC; }
#line default
        break;
      case 15: // Modifier -> PROTECTED
#line 172 "parser.y"
                                                                               { CurrentSemanticValue.modifier = AST.Modifier.PROTECTED; }
#line default
        break;
      case 16: // Modifier -> PRIVATE
#line 173 "parser.y"
                                                                                  { CurrentSemanticValue.modifier = AST.Modifier.PRIVATE; }
#line default
        break;
      case 17: // Modifier -> ABSTRACT
#line 174 "parser.y"
                                                                               { CurrentSemanticValue.modifier = AST.Modifier.ABSTRACT; }
#line default
        break;
      case 18: // Modifier -> STATIC
#line 175 "parser.y"
                                                                               { CurrentSemanticValue.modifier = AST.Modifier.STATIC; }
#line default
        break;
      case 19: // Anon@1 -> /* empty */
#line 176 "parser.y"
                                                                               { CurrentSemanticValue.modifier = AST.Modifier.FINAL; }
#line default
        break;
      case 20: // Modifier -> FINAL, Anon@1
#line 176 "parser.y"
                                                                                                                                                                           { CurrentSemanticValue.modifier = AST.Modifier.STATIC; }
#line default
        break;
      case 24: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 188 "parser.y"
                                                                                        { CurrentSemanticValue.declarations = ValueStack[ValueStack.Depth-2].declarations; }
#line default
        break;
      case 25: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
#line 191 "parser.y"
                                                                                        { CurrentSemanticValue.declarations = ValueStack[ValueStack.Depth-2].declarations; CurrentSemanticValue.declarations.Add(ValueStack[ValueStack.Depth-1].declaration); }
#line default
        break;
      case 26: // ClassBodyDeclarations -> /* empty */
#line 192 "parser.y"
                                                                            { CurrentSemanticValue.declarations = new List<AST.Declaration>(); }
#line default
        break;
      case 27: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 195 "parser.y"
                                                                                        { CurrentSemanticValue.declaration = ValueStack[ValueStack.Depth-1].declaration; }
#line default
        break;
      case 28: // ClassMemberDeclaration -> MethodDeclaration
#line 198 "parser.y"
                                                                                        { CurrentSemanticValue.declaration = ValueStack[ValueStack.Depth-1].declaration; }
#line default
        break;
      case 29: // MethodDeclaration -> Modifiers, MethodHeader, MethodBody
#line 201 "parser.y"
                                                                                        { CurrentSemanticValue.declaration = new AST.MethodDeclaration(ValueStack[ValueStack.Depth-3].modifiers, ValueStack[ValueStack.Depth-2].methodHeader, ValueStack[ValueStack.Depth-1].compoundStatement); }
#line default
        break;
      case 30: // MethodHeader -> Result, MethodDeclarator, ThrowsOpt
#line 204 "parser.y"
                                                                                        { CurrentSemanticValue.methodHeader = new AST.MethodHeader(ValueStack[ValueStack.Depth-3].ASTtype, ValueStack[ValueStack.Depth-2].methodDeclarator); }
#line default
        break;
      case 31: // Result -> UnannType
#line 207 "parser.y"
                                                                                        { CurrentSemanticValue.ASTtype = ValueStack[ValueStack.Depth-1].ASTtype; }
#line default
        break;
      case 32: // Result -> VOID
#line 208 "parser.y"
                                                                                        { CurrentSemanticValue.ASTtype = new AST.VoidType(); }
#line default
        break;
      case 33: // UnannType -> UnannPrimitiveType
#line 211 "parser.y"
                                                                                        { CurrentSemanticValue.ASTtype = ValueStack[ValueStack.Depth-1].ASTtype; }
#line default
        break;
      case 34: // UnannType -> UnannReferenceType
#line 212 "parser.y"
                                                                                        { CurrentSemanticValue.ASTtype = ValueStack[ValueStack.Depth-1].ASTtype; }
#line default
        break;
      case 35: // UnannPrimitiveType -> NumericType
#line 215 "parser.y"
                                                                                        { CurrentSemanticValue.ASTtype = ValueStack[ValueStack.Depth-1].ASTtype; }
#line default
        break;
      case 36: // NumericType -> IntegralType
#line 218 "parser.y"
                                         { CurrentSemanticValue.ASTtype = ValueStack[ValueStack.Depth-1].ASTtype; }
#line default
        break;
      case 37: // IntegralType -> INT
#line 221 "parser.y"
                                   { CurrentSemanticValue.ASTtype = new AST.IntType(); }
#line default
        break;
      case 38: // UnannReferenceType -> UnannArrayType
#line 224 "parser.y"
                                                { CurrentSemanticValue.ASTtype = ValueStack[ValueStack.Depth-1].ASTtype; }
#line default
        break;
      case 39: // UnannReferenceType -> UnannTypeVariable
#line 225 "parser.y"
                                                                            { CurrentSemanticValue.ASTtype = ValueStack[ValueStack.Depth-1].namedType; }
#line default
        break;
      case 40: // UnannArrayType -> UnannTypeVariable, Dims
#line 228 "parser.y"
                                                                                        { CurrentSemanticValue.ASTtype = new AST.ArrayType(ValueStack[ValueStack.Depth-2].namedType); }
#line default
        break;
      case 41: // UnannTypeVariable -> IDENT
#line 231 "parser.y"
                                                                                        { CurrentSemanticValue.namedType = new AST.NamedType(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 45: // MethodDeclarator -> IDENT, '(', FormalParameters, ')', DimsOpt
#line 241 "parser.y"
                                                                   { CurrentSemanticValue.methodDeclarator = new AST.MethodDeclarator(ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-3].parameters); }
#line default
        break;
      case 46: // FormalParameters -> FormalParameter, FormalParameterWithCommas
#line 244 "parser.y"
                                                                                        { CurrentSemanticValue.parameters = ValueStack[ValueStack.Depth-1].parameters; CurrentSemanticValue.parameters.Add(ValueStack[ValueStack.Depth-2].parameter); }
#line default
        break;
      case 47: // FormalParameters -> /* empty */
#line 245 "parser.y"
                                                                            { CurrentSemanticValue.parameters = new List<AST.Parameter>();}
#line default
        break;
      case 48: // FormalParameterWithCommas -> FormalParameterWithCommas, 
               //                              FormalParameterWithComma
#line 248 "parser.y"
                                                                                        { CurrentSemanticValue.parameters = ValueStack[ValueStack.Depth-2].parameters; CurrentSemanticValue.parameters.Add(ValueStack[ValueStack.Depth-1].parameter);}
#line default
        break;
      case 49: // FormalParameterWithCommas -> /* empty */
#line 249 "parser.y"
                                                                                        { CurrentSemanticValue.parameters = new List<AST.Parameter>();}
#line default
        break;
      case 50: // FormalParameterWithComma -> ',', FormalParameter
#line 252 "parser.y"
                                                                                        { CurrentSemanticValue.parameter = ValueStack[ValueStack.Depth-1].parameter;}
#line default
        break;
      case 51: // FormalParameter -> Modifiers, UnannType, VariableDeclaratorId
#line 255 "parser.y"
                                                                                        { CurrentSemanticValue.parameter = new AST.Parameter(ValueStack[ValueStack.Depth-3].modifiers, ValueStack[ValueStack.Depth-2].ASTtype, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 52: // VariableDeclaratorId -> IDENT, DimsOpt
#line 258 "parser.y"
                                                                                        { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 54: // MethodBody -> Block
#line 264 "parser.y"
                                                                                        { CurrentSemanticValue.compoundStatement = ValueStack[ValueStack.Depth-1].compoundStatement; }
#line default
        break;
      case 55: // Block -> '{', BlockStatements, '}'
#line 267 "parser.y"
                                                { CurrentSemanticValue.compoundStatement = new AST.CompoundStatement(ValueStack[ValueStack.Depth-2].statements); }
#line default
        break;
      case 56: // BlockStatements -> BlockStatements, BlockStatement
#line 270 "parser.y"
                                                          { CurrentSemanticValue.statements = ValueStack[ValueStack.Depth-2].statements; CurrentSemanticValue.statements.Add(ValueStack[ValueStack.Depth-1].statement);}
#line default
        break;
      case 57: // BlockStatements -> /* empty */
#line 271 "parser.y"
                                                                                        { CurrentSemanticValue.statements = new List<AST.Statement>(); }
#line default
        break;
      case 58: // BlockStatement -> Statement
#line 274 "parser.y"
                                                                                        { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 59: // BlockStatement -> LocalVariableDeclarationStatement
#line 275 "parser.y"
                                                                                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 60: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, ';'
#line 278 "parser.y"
                                                                                        { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-2].statement; }
#line default
        break;
      case 61: // LocalVariableDeclaration -> UnannType, VariableDeclaratorList
#line 281 "parser.y"
                                                                  { var tempList = new List<AST.LocalVariableDeclaration>();
																						  foreach(var variableDecl in ValueStack[ValueStack.Depth-1].variableDeclarators)
																						  {
																							tempList.Add(new AST.LocalVariableDeclaration(ValueStack[ValueStack.Depth-2].ASTtype, variableDecl.Item1, variableDecl.Item2));
																						  }
																						  CurrentSemanticValue.statement = new AST.LocalVariableDeclarationStatementList(new List<AST.Modifier>(), tempList);
																						}
#line default
        break;
      case 63: // VariableDeclaratorList -> VariableDeclarator, VariableDeclaratorWithCommas
#line 291 "parser.y"
                                                                                        { CurrentSemanticValue.variableDeclarators = ValueStack[ValueStack.Depth-1].variableDeclarators; CurrentSemanticValue.variableDeclarators.Add(ValueStack[ValueStack.Depth-2].variableDeclarator);}
#line default
        break;
      case 64: // VariableDeclaratorWithCommas -> VariableDeclaratorWithCommas, 
               //                                 VariableDeclaratorWithComma
#line 294 "parser.y"
                                                                                        { CurrentSemanticValue.variableDeclarators = ValueStack[ValueStack.Depth-2].variableDeclarators; CurrentSemanticValue.variableDeclarators.Add(ValueStack[ValueStack.Depth-1].variableDeclarator);}
#line default
        break;
      case 65: // VariableDeclaratorWithCommas -> /* empty */
#line 295 "parser.y"
                                                                                        { CurrentSemanticValue.variableDeclarators = new List<Tuple<string, AST.ExpressionStatement>>();}
#line default
        break;
      case 66: // VariableDeclaratorWithComma -> ',', VariableDeclarator
#line 298 "parser.y"
                                                                                        { CurrentSemanticValue.variableDeclarator = ValueStack[ValueStack.Depth-1].variableDeclarator; }
#line default
        break;
      case 67: // VariableDeclarator -> VariableDeclaratorId
#line 301 "parser.y"
                                                                         { CurrentSemanticValue.variableDeclarator = new Tuple<string, AST.ExpressionStatement>(ValueStack[ValueStack.Depth-1].name, null); }
#line default
        break;
      case 68: // VariableDeclarator -> VariableDeclaratorId, '=', VariableInitializer
#line 302 "parser.y"
                                                                            { 
																							var identExp = new AST.IdentifierExpression(ValueStack[ValueStack.Depth-3].name);
																							var exprStatement = new AST.ExpressionStatement(new AST.AssignmentExpression(identExp, "=", ValueStack[ValueStack.Depth-1].expression));
																							CurrentSemanticValue.variableDeclarator = new Tuple<string, AST.ExpressionStatement>(ValueStack[ValueStack.Depth-3].name, exprStatement); 
																						}
#line default
        break;
      case 70: // VariableInitializer -> Expression
#line 312 "parser.y"
                                                                                        { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 71: // Statement -> StatementWithoutTrailingSubstatement
#line 316 "parser.y"
                                                                                        { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 72: // Statement -> IfThenStatement
#line 317 "parser.y"
                                       { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 73: // Statement -> IfThenElseStatement
#line 318 "parser.y"
                                       { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 74: // Statement -> WhileStatement
#line 319 "parser.y"
                                   { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement;}
#line default
        break;
      case 75: // WhileStatement -> WHILE, '(', Expression, ')', Statement
#line 322 "parser.y"
                                                            { CurrentSemanticValue.statement = new AST.WhileStatement(ValueStack[ValueStack.Depth-3].expression,ValueStack[ValueStack.Depth-1].statement); }
#line default
        break;
      case 76: // IfThenStatement -> IF, '(', Expression, ')', Statement
#line 325 "parser.y"
                                                          { CurrentSemanticValue.statement = new AST.IfThenStatement(ValueStack[ValueStack.Depth-3].expression,ValueStack[ValueStack.Depth-1].statement,null); }
#line default
        break;
      case 77: // IfThenElseStatement -> IF, '(', Expression, ')', StatementNoShortIf, ELSE, 
               //                        Statement
#line 328 "parser.y"
                                                                               { CurrentSemanticValue.statement = new AST.IfThenElseStatement(ValueStack[ValueStack.Depth-5].expression,ValueStack[ValueStack.Depth-3].statement,ValueStack[ValueStack.Depth-1].statement); }
#line default
        break;
      case 78: // StatementNoShortIf -> IfThenElseStatementNoShortIf
#line 331 "parser.y"
                                                          { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 79: // StatementNoShortIf -> StatementWithoutTrailingSubstatement
#line 332 "parser.y"
                                                    { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 80: // IfThenElseStatementNoShortIf -> IF, '(', Expression, ')', StatementNoShortIf, 
               //                                 ELSE, StatementNoShortIf
#line 335 "parser.y"
                                                                                               { CurrentSemanticValue.statement = new AST.IfThenElseStatement(ValueStack[ValueStack.Depth-5].expression,ValueStack[ValueStack.Depth-3].statement,ValueStack[ValueStack.Depth-1].statement); }
#line default
        break;
      case 81: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 339 "parser.y"
                                                                                        { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 82: // StatementWithoutTrailingSubstatement -> Block
#line 340 "parser.y"
                                                             { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].compoundStatement; }
#line default
        break;
      case 83: // StatementWithoutTrailingSubstatement -> ReturnStatement
#line 341 "parser.y"
                                   { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 84: // ReturnStatement -> RETURN, Expression, ';'
#line 344 "parser.y"
                                                   { CurrentSemanticValue.statement = new AST.ReturnStatement(ValueStack[ValueStack.Depth-2].expression); }
#line default
        break;
      case 85: // ReturnStatement -> RETURN, ';'
#line 345 "parser.y"
                                                                               { CurrentSemanticValue.statement = new AST.ReturnStatement(null); }
#line default
        break;
      case 86: // ExpressionStatement -> StatementExpression, ';'
#line 348 "parser.y"
                                                                                        { CurrentSemanticValue.statement = new AST.ExpressionStatement(ValueStack[ValueStack.Depth-2].expression); }
#line default
        break;
      case 87: // StatementExpression -> Assignment
#line 351 "parser.y"
                                                                                  { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 88: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 354 "parser.y"
                                                                                        { CurrentSemanticValue.expression = new AST.AssignmentExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].name, ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 89: // LeftHandSide -> ExpressionName
#line 357 "parser.y"
                                                                                        { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 90: // ExpressionName -> IDENT
#line 360 "parser.y"
                                      { CurrentSemanticValue.expression = new AST.IdentifierExpression(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 91: // AssignmentOperator -> '='
#line 363 "parser.y"
                                                                                        { CurrentSemanticValue.name = "="; }
#line default
        break;
      case 92: // PlusOperator -> '+'
#line 366 "parser.y"
                                                                                        { CurrentSemanticValue.name = "+"; }
#line default
        break;
      case 93: // SubtractOperator -> '-'
#line 369 "parser.y"
                                                                                        { CurrentSemanticValue.name = "-"; }
#line default
        break;
      case 94: // MultiplicationOperator -> '*'
#line 372 "parser.y"
                                                                                        { CurrentSemanticValue.name = "*"; }
#line default
        break;
      case 95: // DivisionOperator -> '/'
#line 375 "parser.y"
                                                                                        { CurrentSemanticValue.name = "/"; }
#line default
        break;
      case 96: // ModulusOperator -> '%'
#line 378 "parser.y"
                                                                                        { CurrentSemanticValue.name = "%"; }
#line default
        break;
      case 97: // Expression -> AssignmentExpression
#line 381 "parser.y"
                                                                                        { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 98: // AssignmentExpression -> ConditionalExpression
#line 384 "parser.y"
                                                                                        { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 99: // AssignmentExpression -> Assignment
#line 385 "parser.y"
                                                                                        { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 100: // ConditionalExpression -> ConditionalOrExpression
#line 388 "parser.y"
                                                                                        { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 101: // ConditionalOrExpression -> ConditionalAndExpression
#line 391 "parser.y"
                                                           { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 102: // ConditionalAndExpression -> InclusiveOrExpression
#line 394 "parser.y"
                                                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 103: // InclusiveOrExpression -> ExclusiveOrExpression
#line 397 "parser.y"
                                                       { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 104: // ExclusiveOrExpression -> AndExpression
#line 400 "parser.y"
                                                 { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 105: // AndExpression -> EqualityExpression
#line 403 "parser.y"
                                               { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 106: // EqualityExpression -> RelationalExpression
#line 406 "parser.y"
                                                    { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 107: // EqualityExpression -> EqualityExpression, EQUALS, RelationalExpression
#line 407 "parser.y"
                                                            { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, "==", ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 108: // EqualityExpression -> EqualityExpression, NOT_EQUALS, RelationalExpression
#line 408 "parser.y"
                                                               { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, "!=", ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 109: // RelationalExpression -> ShiftExpression
#line 411 "parser.y"
                                                  { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 110: // RelationalExpression -> RelationalExpression, '<', ShiftExpression
#line 412 "parser.y"
                                                      { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, "<", ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 111: // RelationalExpression -> RelationalExpression, '>', ShiftExpression
#line 413 "parser.y"
                                                      { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, ">", ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 112: // RelationalExpression -> RelationalExpression, LEQ, ShiftExpression
#line 414 "parser.y"
                                                      { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, "<=", ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 113: // RelationalExpression -> RelationalExpression, GEQ, ShiftExpression
#line 415 "parser.y"
                                                      { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, ">=", ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 114: // ShiftExpression -> AdditiveExpression
#line 418 "parser.y"
                                                 { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 115: // AdditiveExpression -> MultiplicativeExpression
#line 421 "parser.y"
                                                       { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 116: // AdditiveExpression -> AdditiveExpression, PlusOperator, 
                //                       MultiplicativeExpression
#line 422 "parser.y"
                                                                      { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].name , ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 117: // AdditiveExpression -> AdditiveExpression, SubtractOperator, 
                //                       MultiplicativeExpression
#line 423 "parser.y"
                                                                      { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].name , ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 118: // MultiplicativeExpression -> UnaryExpression
#line 426 "parser.y"
                                                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 119: // MultiplicativeExpression -> MultiplicativeExpression, MultiplicationOperator, 
                //                             UnaryExpression
#line 427 "parser.y"
                                                                           { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].name , ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 120: // MultiplicativeExpression -> MultiplicativeExpression, DivisionOperator, 
                //                             UnaryExpression
#line 428 "parser.y"
                                                                           { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].name , ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 121: // MultiplicativeExpression -> MultiplicativeExpression, ModulusOperator, 
                //                             UnaryExpression
#line 429 "parser.y"
                                                                           { CurrentSemanticValue.expression = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-2].name , ValueStack[ValueStack.Depth-1].expression); }
#line default
        break;
      case 122: // UnaryExpression -> PlusOperator, UnaryExpression
#line 432 "parser.y"
                                                        { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 123: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 433 "parser.y"
                                                       { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 124: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 436 "parser.y"
                                                         { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 125: // PostfixExpression -> Primary
#line 439 "parser.y"
                                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 126: // PostfixExpression -> ExpressionName
#line 440 "parser.y"
                                   { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 127: // Primary -> PrimaryNoNewArray
#line 443 "parser.y"
                                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 128: // PrimaryNoNewArray -> Literal
#line 446 "parser.y"
                                          { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; }
#line default
        break;
      case 129: // Literal -> INTEGER_LITERAL
#line 449 "parser.y"
                                        { CurrentSemanticValue.expression = new AST.IntegerLiteralExpression(ValueStack[ValueStack.Depth-1].num); }
#line default
        break;
      case 130: // Literal -> STRING_LITERAL
#line 450 "parser.y"
                                                                                        { CurrentSemanticValue.expression = new AST.StringLiteralExpression(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 455 "parser.y"
public Parser(Scanner scanner) : base(scanner)
{
}

#line default
}
}
